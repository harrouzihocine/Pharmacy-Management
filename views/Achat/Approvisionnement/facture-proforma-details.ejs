<% layout('layouts/boilerplate') %>
<div class="storage-table-container">
  <button class="btn back-btn back-button" onclick="window.location.href='/achat/approvisionnement/facture-proforma'">
    <i class="bi bi-arrow-left-circle"></i>
  </button>
  <h1>Facture Proforma Details</h1>

  <!-- General Information Section -->
  <div class="demand-info-section">
    <h2>General Information</h2>
    <table class="demand-info-table">
      <tr>
        <input type="text" class="factureProforma-id" value="<%=  factureProforma._id %>" hidden>
        <input type="text" class="facture-proforma-demandId" value="<%= factureProforma.demandId._id %>" hidden>
        <th>Facture Proforma Code</th>
        <td><%= factureProforma.factureProformaCode %></td>
      </tr>
      <tr>
        <th>Status</th>
        <td><%= factureProforma.status %></td>
      </tr>
      <tr>
        <th>Created By</th>
        <td><%= factureProforma.createdBy.username %></td>
      </tr>
      <tr>
        <th>Created Date</th>
        <td><%= new Date(factureProforma.createdAt).toLocaleString() %></td>
      </tr>
    </table>
  </div>

  <!-- Supplier Information Section -->
  <div class="demand-info-section">
    <h2>Fournisseur Information</h2>
    <table class="demand-info-table">
    
        <input type="text" class="fournisseur-id" value="<%=  factureProforma.fournisseur._id %>" hidden>
        <th>Fournisseur Name</th>
        <td><%= factureProforma.fournisseur.name %></td>
      </tr>
      <tr>
        <th>Fournisseur Address</th>
        <td><%= factureProforma.fournisseur.wilaya || 'N/A' %>, <%= factureProforma.fournisseur.city || 'N/A' %></td>
      </tr>
      <tr>
        <th>Fournisseur Contact</th>
        <td>
          <p><strong>Phone:</strong> <%= factureProforma.fournisseur.phone || 'N/A' %></p>

          <% if (factureProforma.fournisseur.mobile && factureProforma.fournisseur.mobile.length > 0) { %>
            <p><strong>Mobile:</strong> <%= factureProforma.fournisseur.mobile.join(', ') %></p>
          <% } else { %>
            <p><strong>Mobile:</strong> N/A</p>
          <% } %>
        </td>
      </tr>
    </table>
  </div>

  <!-- Medicaments Section -->
  <h2>Items</h2>
    
  <form class="search-bar mb-2">
    <input type="text" id="search" placeholder="Search in Items list" />
  </form>
  <table class="create-prescription-table sortable">
    <thead>
      <tr>
        <th>Item</th>
        <th>Quantity Demanded</th>
        <th>Quantity in profoma</th>
        <th>Order Quantity</th>
        <th>Type</th>
        <th>Form</th>
      </tr>
    </thead>
    <tbody id="tablebody">
      <% factureProforma.medicaments.forEach(medicament => { %>
        <tr data-medicament-id="<%= medicament.medicamentId._id %>">
          <td><%= medicament.medicamentId.designation %></td>
          <td><%= medicament.quantityDemanded %></td>
          <td><%= medicament.quantity %></td>
          <td><input type="number" class="form-control order-quantity-cell" min="0" placeholder="Enter quantity" value="<%=  medicament.quantityDemanded %>"></td>
          <td><%= medicament.medicamentId.type_medicament %></td>
          <td><%= medicament.medicamentId.forme %></td>
        </tr>
      <% }) %>
    </tbody>
  </table>
  <button id="submit-proforma-factures" class="btn demand-new-button mt-2">Generate Purchase Order (BC)</button>
</div>
<script>
  document.getElementById('submit-proforma-factures').addEventListener('click', function() {
    // Collect the required data
   
    const demandId = document.querySelector('.facture-proforma-demandId').value;
    const fournisseurId = document.querySelector('.fournisseur-id').value;
    const factureProformaId = document.querySelector('.factureProforma-id').value;
   
    
    // Collect Medicament IDs and their respective order quantities
    const medicaments = [];
    document.querySelectorAll('.create-prescription-table tbody tr').forEach(row => {
      const medicamentId = row.dataset.medicamentId;
      const orderQuantity = row.querySelector('.order-quantity-cell').value;

      if (orderQuantity > 0) { // Only include rows with valid order quantities
        medicaments.push({
          medicamentId: medicamentId,
          orderQuantity: orderQuantity
        });
      }
    });

    // Prepare data to be sent to the backend
    const requestData = {
      factureProformaId: factureProformaId,
      fournisseurId: fournisseurId,
      demandId:demandId,
      medicaments: medicaments
    };

    // Send the data to the backend using AJAX (Fetch API or XMLHttpRequest)
    fetch('/achat/approvisionnement/BC/create', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestData)
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert('Bon de commande generated successfully!');
        // window.location.href = '/achat/approvisionnement/BC'; // Redirect after success
      } else {
        alert('An error occurred while generating the Bon de commande');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('An error occurred while generating the Bon de commande');
    });
  });
</script>

